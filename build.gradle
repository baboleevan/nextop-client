// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.android.tools.build', name: 'gradle', version: '1.0.1'
    }
}

/** derive the version name from git tags.
 * - exact tags are versions
 * - follow ups to tags bump the tag minor version and add -SNAPSHOT
 *
 * @see http://ryanharter.com/blog/2013/07/30/automatic-versioning-with-git-and-gradle/ */
def versionName() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    def gitName = stdout.toString().trim()
    if (gitName.contains("-")) {
        // increment the minor + snapshot
        def vs = gitName.split('-')[0].split('\\.')
        vs[-1] = vs[-1].toInteger() + 1
        return vs.join('.') + '-SNAPSHOT'
    } else {
        return gitName
    }
}

/** for Android apps, derived from the version name.
 * For a version name "A.B.C" with each number on [0, 1000), the version code is
 * <code>C + 1000 * (B + 1000 * A))</code>. */
def androidVersionCode() {
    def versionName = versionName();
    def versionNumbers = versionName.split('-')[0].split('\\.');

    if (3 != versionNumbers.length) {
        throw new IllegalArgumentException();
    }
    def m = 1000;
    def a = versionNumbers[0].toInteger();
    def b = versionNumbers[1].toInteger();
    def c = versionNumbers[2].toInteger();
    if (a < 0 || m <= a) {
        throw new IllegalArgumentException();
    }
    if (b < 0 || m <= b) {
        throw new IllegalArgumentException();
    }
    if (c < 0 || m <= c) {
        throw new IllegalArgumentException();
    }

    return c + m * (b + m * a);
}

subprojects {
    group 'io.nextop'
    version versionName()
}
