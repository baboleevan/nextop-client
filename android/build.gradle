
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.android.tools.build', name: 'gradle', version: '1.0.1'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'


repositories {
    mavenCentral()
}

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.2'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 21
        versionCode 1
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile project(':java-common')
    compile fileTree(dir: 'libs', include: ['*.jar'])
}


// @see http://stackoverflow.com/questions/17033878/generate-javadocs-with-android-gradle-plugin
// @see http://stackoverflow.com/questions/19307341/android-library-gradle-release-jar

android.libraryVariants.all { variant ->
    task("archive${variant.name.capitalize()}Sources", type: Jar) {
        description "Generates sources for $variant.name."
        classifier = 'sources'
        from variant.javaCompile.source
    }

    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    task("archive${variant.name.capitalize()}Javadoc", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
        classifier = 'javadoc'
        from tasks["generate${variant.name.capitalize()}Javadoc"].destinationDir
    }

    artifacts {
        archives tasks["archive${variant.name.capitalize()}Sources"]
        archives tasks["archive${variant.name.capitalize()}Javadoc"]
    }
}


// properties defined in $HOME/gradle.properties
// @see http://central.sonatype.org/pages/gradle.html

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                groupId 'io.nextop'
                artifactId 'android'
                name 'Nextop for Android'
                description 'Nextop client for Android 10+'
                url 'http://nextop.io/android'
                scm {
                    url 'https://github.com/nextopio/nextop-client/tree/master/android'
                }
                developers {
                    developer {
                        name 'nextop.io'
                        email 'support@nextop.io'
                        organization 'Nextop Inc'
                        organizationUrl 'http://nextop.io'
                    }
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}
